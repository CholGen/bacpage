from snakemake.utils import validate
import pandas as pd


def get_genes() -> dict[str, str]:
    genes = dict()
    for file in os.listdir( config["reference_genes"] ):
        if file.endswith( (".fa", ".fasta") ):
            gene = os.path.splitext( file )[0]
            path = os.path.join( config["reference_genes"],file )
            genes[gene] = path
    return genes


print(
    """
                      GREETINGS FROM:
 _______  __   __  ______    _______  ___   _  _______ 
|       ||  | |  ||    _ |  |       ||   | | ||   _   |
|    ___||  | |  ||   | ||  |    ___||   |_| ||  |_|  |
|   |___ |  |_|  ||   |_||_ |   |___ |      _||       |
|    ___||       ||    __  ||    ___||     |_ |       |
|   |___ |       ||   |  | ||   |___ |    _  ||   _   |
|_______||_______||___|  |_||_______||___| |_||__| |__|
   """
)

print( "Loading and validating configuration file...",end="" )
try:
    assert config != {}, "Config must be specified in command line using '--configfile <path-to-config-file>'"
    assert "run_type" in config, "No reference in config to run_type. Please specify whether run is for 'ONT' long reads or 'Illumina' short reads."
    run_type = config["run_type"]
    assert config["run_type"] in ["ONT",
                                  "Illumina"], f"run_type: {config['run_type']} is not one of ['ONT', 'Illumina']."
    validate( config,f"schemas/{run_type}_config.schema.yaml" )
except Exception:
    print( "Error" )
    raise
print( "Done" )

print( "Loading and validating samples metadata...",end="" )
try:
    md = pd.read_csv( config["samples"] )
    validate( md,f"schemas/{run_type}_metadata.schema.yaml" )
    if run_type == "Illumina":
        SAMPLES = md.set_index( "sample" )[["read1", "read2"]].to_dict( orient="index" )
    elif run_type == "ONT":
        SAMPLES = md.set_index( "sample" )["reads"].to_dict()
except Exception:
    print( "Error" )
    raise
print( "Done" )

print( "Identifying gene sequences for typing...",end="" )
try:
    GENES = get_genes()
except Exception:
    print( "Error" )
    raise
print( "Done" )
print( f"The following genes will be used: [{', '.join( GENES.keys() )}]\n" )

workdir: config["output_directory"]

rule all:
    message: "Generate consensus sequence for all samples indicated by {config[samples]}"
    input:
        expand( "intermediates/illumina/consensus/{sample}.masked.fasta",sample=SAMPLES ),
        "results/reports/typing_information.csv"

#"results/reports/final_report.html"

include: f"rules/consensus_calling_{run_type}.smk"
include: f"rules/masking_{run_type}.smk"
include: f"rules/typing_{run_type}.smk"
