from snakemake.utils import validate
import pandas as pd
import os
from rules.common import normalize_path, get_genes, determine_outputs

CONFIG_PATHS = ["output_directory", "samples", "reference", "reference_genes", "recombinant_mask", "background_dataset"]

print(
    """
                      GREETINGS FROM:
 _______  __   __  ______    _______  ___   _  _______ 
|       ||  | |  ||    _ |  |       ||   | | ||   _   |
|    ___||  | |  ||   | ||  |    ___||   |_| ||  |_|  |
|   |___ |  |_|  ||   |_||_ |   |___ |      _||       |
|    ___||       ||    __  ||    ___||     |_ |       |
|   |___ |       ||   |  | ||   |___ |    _  ||   _   |
|_______||_______||___|  |_||_______||___| |_||__| |__|
   """
)

print( "Loading and validating configuration file...",end="" )
try:
    assert config != { }, "Config must be specified in command line using '--configfile <path-to-config-file>'"
    assert "run_type" in config, "No reference in config to run_type. Please specify whether run is for 'ONT' long reads or 'Illumina' short reads."
    run_type = config["run_type"]
    assert config["run_type"] in ["ONT",
                                  "Illumina"], f"run_type: {config['run_type']} is not one of ['ONT', 'Illumina']."
    validate( config,f"schemas/{run_type}_config.schema.yaml" )
except Exception:
    print( "Error" )
    raise
print( "Done" )

print( "Loading and validating samples metadata...",end="" )
skipped_samples = list()
try:
    md = pd.read_csv( config["samples"] )
    validate( md,f"schemas/{run_type}_metadata.schema.yaml" )
    if run_type == "Illumina":
        md["read1"] = md["read1"].apply( lambda x: normalize_path( x,workflow.workdir_init ) )
        md["read2"] = md["read2"].apply( lambda x: normalize_path( x,workflow.workdir_init ) )
        if config["preprocessing"]["check_size"]:
            md["size"] = md["read1"].apply( os.path.getsize )
            skipped_samples = md.loc[md["size"] < config["preprocessing"]["minimum_size"], "sample"].to_list()
            md = md.loc[md["size"] >= config["preprocessing"]["minimum_size"]]
        SAMPLES = md.set_index( "sample" )[["read1", "read2"]].to_dict( orient="index" )
    elif run_type == "ONT":
        SAMPLES = md.set_index( "sample" )["reads"].to_dict()
except Exception:
    print( "Error" )
    raise
print( "Done" )

if len( skipped_samples ) > 0:
    print( f"Skipping samples [{', '.join( skipped_samples )}] because they have no reads." )

# Normalize config paths:
for key in CONFIG_PATHS:
    config[key] = normalize_path( config[key],workflow.workdir_init )

print( "Identifying gene sequences for typing...",end="" )
try:
    GENES = get_genes( config["reference_genes"] )
except Exception:
    print( "Error" )
    raise
print( "Done" )
print( f"The following genes will be used: [{', '.join( GENES.keys() )}]\n" )

workdir: config["output_directory"]

rule all:
    message: "Generate consensus sequence for all samples indicated by {config[samples]}"
    input:
        lambda wildcards: determine_outputs( SAMPLES,config )

include: f"rules/consensus_calling_{run_type}.smk"
include: f"rules/masking_{run_type}.smk"
include: f"rules/typing_{run_type}.smk"
include: "rules/quality-control.smk"
include: "rules/tree_building.smk"
